/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 01:04:43 GMT 2022
 */

package cn.byhieg.algorithmtutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.byhieg.algorithmtutorial.Find;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Find_ESTest extends Find_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[37];
      int int0 = find0.binarySearchMaxFind(intArray0, 0);
      assertEquals(37, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[37];
      int int0 = find0.binarySearchMinFind(intArray0, 0);
      assertEquals(37, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[7];
      intArray0[3] = 1;
      int int0 = find0.binarySearchMinFind(intArray0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {0, 0, 0, 1, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2613);
      int int0 = find0.binarySearchMaxFind(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2613), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[1];
      int int0 = find0.binarySearchFind(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      // Undeclared exception!
      try { 
        find0.binarySearchMinFind((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.Find", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        find0.binarySearchMinFind(intArray0, (-2458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("cn.byhieg.algorithmtutorial.Find", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      // Undeclared exception!
      try { 
        find0.binarySearchMaxFind((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.Find", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        find0.binarySearchMaxFind(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("cn.byhieg.algorithmtutorial.Find", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      // Undeclared exception!
      try { 
        find0.binarySearchFind((int[]) null, 1036);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.Find", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchMaxFind(intArray0, 2898);
      assertEquals(10, intArray0.length);
      assertEquals(9, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchMaxFind(intArray0, (-1));
      assertEquals(10, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchMinFind(intArray0, 4);
      assertEquals(10, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Find find0 = new Find();
      assertNotNull(find0);
      
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchMinFind(intArray0, (-1));
      assertEquals(10, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Find find0 = new Find();
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchFind(intArray0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Find find0 = new Find();
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchFind(intArray0, 0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Find find0 = new Find();
      int[] intArray0 = new int[10];
      int int0 = find0.binarySearchFind(intArray0, 2898);
      assertEquals((-1), int0);
  }
}
