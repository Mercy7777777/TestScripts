/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 00:10:47 GMT 2022
 */

package cn.byhieg.algorithmtutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.byhieg.algorithmtutorial.BinarySearchTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinarySearchTree_ESTest extends BinarySearchTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-928);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 669;
      intArray0[5] = 116;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySearchTree binarySearchTree0 = null;
      try {
        binarySearchTree0 = new BinarySearchTree(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      // Undeclared exception!
      try { 
        binarySearchTree0.find(1363);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1068);
      intArray0[2] = 760;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      binarySearchTree0.preOrder(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node(2726);
      binarySearchTree_Node0.left = binarySearchTree_Node1;
      BinarySearchTree.Node binarySearchTree_Node2 = binarySearchTree0.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node3 = binarySearchTree0.getMinNode();
      binarySearchTree_Node3.right = binarySearchTree_Node2;
      binarySearchTree_Node1.data = (-1287);
      binarySearchTree_Node3.data = 3882;
      binarySearchTree_Node3.left = binarySearchTree_Node0;
      BinarySearchTree.Node binarySearchTree_Node4 = binarySearchTree_Node3.right.right;
      binarySearchTree_Node3.right = binarySearchTree_Node4;
      // Undeclared exception!
      binarySearchTree0.levelRead(binarySearchTree_Node3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 719;
      intArray0[1] = 283;
      intArray0[2] = 1;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      int int0 = 0;
      binarySearchTree_Node0.data = 0;
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree_Node0.right;
      // Undeclared exception!
      try { 
        binarySearchTree0.preOrder((BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = null;
      try {
        binarySearchTree0 = new BinarySearchTree((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getMinNode();
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      binarySearchTree_Node0.right.data = 1;
      // Undeclared exception!
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      assertNull(binarySearchTree_Node0);
      
      binarySearchTree0.postOrder2((BinarySearchTree.Node) null);
      // Undeclared exception!
      try { 
        binarySearchTree0.getMinNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u4E3A\u7A7A
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2410);
      intArray0[1] = 2697;
      intArray0[2] = (-1228);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-845));
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getMinNode();
      binarySearchTree_Node0.data = 1075;
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      // Undeclared exception!
      binarySearchTree0.preOrder2(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree_Node0.left;
      // Undeclared exception!
      try { 
        binarySearchTree0.insert((BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 993;
      intArray0[1] = 7;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(0);
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
      binarySearchTree0.postOrder(binarySearchTree_Node0);
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
      binarySearchTree0.inorder2((BinarySearchTree.Node) null);
      binarySearchTree_Node0.data = 0;
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getMaxNode();
      binarySearchTree_Node1.data = (-608);
      binarySearchTree_Node1.right = binarySearchTree_Node0;
      binarySearchTree0.preOrder2(binarySearchTree_Node1);
      // Undeclared exception!
      try { 
        binarySearchTree0.postOrder((BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 9;
      intArray0[1] = (-1068);
      intArray0[2] = 760;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      binarySearchTree0.preOrder(binarySearchTree_Node0);
      binarySearchTree_Node0.left = binarySearchTree_Node0;
      binarySearchTree0.find(9);
      // Undeclared exception!
      binarySearchTree0.getMinNode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1538;
      intArray0[1] = (-2097);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      binarySearchTree0.postOrder(binarySearchTree_Node0);
      BinarySearchTree binarySearchTree1 = new BinarySearchTree(intArray0);
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      binarySearchTree1.find(0);
      binarySearchTree_Node0.left = null;
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.find(1538);
      binarySearchTree1.postOrder2((BinarySearchTree.Node) null);
      binarySearchTree_Node1.right = binarySearchTree_Node0;
      binarySearchTree_Node1.data = 1538;
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node1);
      binarySearchTree0.getMinNode();
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 1538;
      intArray1[2] = 1538;
      intArray1[3] = 0;
      intArray1[4] = 1538;
      // Undeclared exception!
      try { 
        binarySearchTree1.getTree(intArray0, intArray1, binarySearchTree_Node1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 11;
      intArray0[1] = 1405;
      intArray0[2] = (-449);
      intArray0[3] = 79;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree_Node0.left;
      binarySearchTree_Node1.data = (-449);
      binarySearchTree0.inorder2(binarySearchTree_Node1);
      BinarySearchTree.Node binarySearchTree_Node2 = binarySearchTree0.getMaxNode();
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      binarySearchTree_Node0.left = binarySearchTree_Node1;
      BinarySearchTree.Node binarySearchTree_Node3 = binarySearchTree0.find(1405);
      binarySearchTree0.postOrder(binarySearchTree_Node1);
      BinarySearchTree.Node binarySearchTree_Node4 = binarySearchTree0.getMinNode();
      binarySearchTree_Node4.left = binarySearchTree_Node2;
      binarySearchTree0.levelRead(binarySearchTree_Node4);
      binarySearchTree0.postOrder(binarySearchTree_Node4.left);
      binarySearchTree0.levelRead(binarySearchTree_Node3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 2224;
      intArray0[2] = 10;
      intArray0[3] = 643;
      intArray0[4] = (-1);
      intArray0[5] = (-4609);
      intArray0[6] = 954;
      intArray0[7] = 123;
      intArray0[8] = 416;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      int[] intArray1 = new int[7];
      intArray1[0] = 643;
      // Undeclared exception!
      try { 
        binarySearchTree0.getTree(intArray0, intArray1, binarySearchTree_Node0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1336);
      intArray0[1] = (-1336);
      intArray0[2] = 629;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.find(0);
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-1336));
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree0.postOrder2(binarySearchTree_Node1);
      binarySearchTree_Node0.data = 0;
      binarySearchTree0.inOrder(binarySearchTree_Node1);
      // Undeclared exception!
      try { 
        binarySearchTree0.insert(binarySearchTree_Node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2391;
      intArray0[1] = 79;
      int int0 = (-3216);
      intArray0[2] = (-3216);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      binarySearchTree0.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getMinNode();
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      // Undeclared exception!
      binarySearchTree0.find((-2228));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-2935));
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-2935));
      binarySearchTree_Node1.right = binarySearchTree_Node0;
      binarySearchTree0.postOrder(binarySearchTree_Node1);
      // Undeclared exception!
      try { 
        binarySearchTree0.find((-2935));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2115);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      binarySearchTree0.postOrder(binarySearchTree_Node0);
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      binarySearchTree0.find(2);
      binarySearchTree0.postOrder2((BinarySearchTree.Node) null);
      binarySearchTree0.inorder2((BinarySearchTree.Node) null);
      binarySearchTree0.getMinNode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(2389);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.postOrder(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.getRoot();
      // Undeclared exception!
      try { 
        binarySearchTree0.postOrder((BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2147483645;
      intArray0[1] = (-1477);
      intArray0[2] = 1;
      intArray0[3] = (-1728);
      intArray0[4] = 21;
      intArray0[5] = (-3378);
      intArray0[6] = (-1096);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(2070);
      binarySearchTree0.insert(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(0);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      binarySearchTree0.insert(binarySearchTree_Node0);
      binarySearchTree0.preOrder2(binarySearchTree_Node0);
      binarySearchTree0.inOrder(binarySearchTree_Node0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      binarySearchTree0.find((-1));
      intArray0[3] = 0;
      intArray0[4] = 0;
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getMinNode();
      binarySearchTree0.inorder2(binarySearchTree_Node1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(0);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      binarySearchTree0.insert(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.find(0);
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      // Undeclared exception!
      binarySearchTree0.preOrder2(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1336);
      intArray0[1] = 0;
      intArray0[2] = 629;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.find(0);
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-1336));
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree0.postOrder2(binarySearchTree_Node1);
      BinarySearchTree.Node binarySearchTree_Node2 = binarySearchTree0.getMaxNode();
      binarySearchTree0.preOrder(binarySearchTree_Node1);
      binarySearchTree_Node1.left = binarySearchTree_Node2;
      binarySearchTree_Node0.data = (-1336);
      binarySearchTree0.inOrder(binarySearchTree_Node1);
      binarySearchTree_Node1.right = binarySearchTree_Node0;
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      // Undeclared exception!
      binarySearchTree0.getMaxNode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-287);
      intArray0[1] = (-1);
      intArray0[2] = 2877;
      intArray0[3] = (-101);
      intArray0[4] = (-2693);
      intArray0[5] = 635;
      intArray0[6] = 1665;
      intArray0[7] = 0;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-829));
      binarySearchTree0.inOrder(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getRoot();
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      BinarySearchTree.Node binarySearchTree_Node2 = binarySearchTree0.getRoot();
      binarySearchTree_Node0.right = binarySearchTree_Node2;
      binarySearchTree0.getMinNode();
      binarySearchTree0.insert(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node3 = binarySearchTree0.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node4 = binarySearchTree_Node3.left;
      // Undeclared exception!
      try { 
        binarySearchTree0.getTree(intArray0, intArray0, (BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-1));
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-1368));
      binarySearchTree_Node0.left = binarySearchTree_Node1;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      binarySearchTree_Node1.left = binarySearchTree_Node0.left;
      // Undeclared exception!
      binarySearchTree0.inorder2(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1171);
      intArray0[1] = (-2856);
      int int0 = 954;
      intArray0[2] = 954;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getRoot();
      binarySearchTree_Node0.right = binarySearchTree_Node1;
      binarySearchTree_Node1.left = binarySearchTree_Node0.right;
      // Undeclared exception!
      binarySearchTree0.insert(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 2;
      intArray0[1] = (-1738);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree binarySearchTree1 = new BinarySearchTree();
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      binarySearchTree1.preOrder2(binarySearchTree_Node0);
      // Undeclared exception!
      try { 
        binarySearchTree1.getMaxNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u4E3A\u7A7A
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(0);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      binarySearchTree0.insert(binarySearchTree_Node0);
      binarySearchTree0.preOrder2(binarySearchTree_Node0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 3696;
      intArray0[2] = (-392);
      intArray0[3] = (-1344);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      assertEquals(3696, binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1336);
      intArray0[2] = 606;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.find((-1336));
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-1336));
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree0.postOrder2(binarySearchTree_Node1);
      binarySearchTree0.preOrder(binarySearchTree_Node1);
      binarySearchTree0.inOrder(binarySearchTree_Node1);
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      // Undeclared exception!
      try { 
        binarySearchTree0.insert(binarySearchTree_Node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 67;
      intArray0[1] = 0;
      intArray0[2] = 1566;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      binarySearchTree0.preOrder(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getRoot();
      binarySearchTree0.inOrder(binarySearchTree_Node1);
      binarySearchTree0.inOrder(binarySearchTree_Node1);
      assertEquals(67, binarySearchTree_Node1.data);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1870);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      binarySearchTree0.preOrder(binarySearchTree_Node0);
      assertEquals(0, binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(1);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.preOrder(binarySearchTree_Node0);
      assertEquals(1, binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.getRoot();
      // Undeclared exception!
      try { 
        binarySearchTree0.preOrder((BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1336);
      intArray0[2] = 629;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-1336));
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
      binarySearchTree0.inOrder(binarySearchTree_Node0);
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      assertEquals((-1336), binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.getRoot();
      // Undeclared exception!
      try { 
        binarySearchTree0.inOrder((BinarySearchTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1915);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      assertEquals((-1915), binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 959;
      intArray0[1] = 2176;
      intArray0[2] = (-1732);
      intArray0[3] = (-2252);
      intArray0[4] = 20;
      int[] intArray1 = new int[3];
      intArray1[0] = (-1732);
      intArray1[1] = 959;
      intArray1[2] = 959;
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(2176);
      // Undeclared exception!
      try { 
        binarySearchTree0.getTree(intArray0, intArray1, binarySearchTree_Node0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2263;
      intArray0[1] = 2103;
      intArray0[2] = 754;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMinNode();
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
      assertEquals(754, binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 193;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree binarySearchTree1 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree1.getMinNode();
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree1.getMaxNode();
      binarySearchTree_Node0.left = binarySearchTree_Node1;
      // Undeclared exception!
      binarySearchTree0.postOrder2(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      // Undeclared exception!
      try { 
        binarySearchTree0.getMinNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u4E3A\u7A7A
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 156;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(156);
      // Undeclared exception!
      try { 
        binarySearchTree0.insert(binarySearchTree_Node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-36));
      int[] intArray0 = new int[1];
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      boolean boolean0 = binarySearchTree0.insert(binarySearchTree_Node0);
      assertTrue(boolean0);
      
      binarySearchTree0.inorder2(binarySearchTree_Node0);
      assertEquals((-36), binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      // Undeclared exception!
      try { 
        binarySearchTree0.getMaxNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u4E3A\u7A7A
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[6];
      BinarySearchTree binarySearchTree0 = null;
      try {
        binarySearchTree0 = new BinarySearchTree(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2147483645;
      intArray0[2] = (-719);
      intArray0[3] = (-868);
      intArray0[4] = (-4387);
      intArray0[5] = (-3295);
      intArray0[6] = 3248;
      intArray0[7] = 2;
      intArray0[8] = 1;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      binarySearchTree0.levelRead((BinarySearchTree.Node) null);
      binarySearchTree0.postOrder2((BinarySearchTree.Node) null);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getMaxNode();
      binarySearchTree0.levelRead(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.find(2147483645);
      assertNotNull(binarySearchTree_Node1);
      
      BinarySearchTree.Node binarySearchTree_Node2 = binarySearchTree0.getMinNode();
      assertEquals((-4387), binarySearchTree_Node2.data);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      BinarySearchTree.Node binarySearchTree_Node0 = null;
      binarySearchTree0.preOrder2((BinarySearchTree.Node) null);
      binarySearchTree0.inorder2((BinarySearchTree.Node) null);
      // Undeclared exception!
      try { 
        binarySearchTree0.getMaxNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u4E3A\u7A7A
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(7);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.preOrder2(binarySearchTree_Node0);
      binarySearchTree0.inorder2(binarySearchTree_Node0);
      assertEquals(7, binarySearchTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(0);
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      binarySearchTree0.insert(binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.find(0);
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree_Node0.right = binarySearchTree_Node1.left;
      // Undeclared exception!
      binarySearchTree0.preOrder2(binarySearchTree_Node0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1336);
      intArray0[2] = 628;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = binarySearchTree0.getRoot();
      binarySearchTree0.getTree(intArray0, intArray0, binarySearchTree_Node0);
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-1336));
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree0.postOrder2(binarySearchTree_Node1);
      binarySearchTree0.preOrder(binarySearchTree_Node1);
      binarySearchTree_Node1.right = binarySearchTree_Node1.left;
      binarySearchTree0.inOrder(binarySearchTree_Node1);
      binarySearchTree_Node1.right = binarySearchTree_Node0;
      binarySearchTree0.getMaxNode();
      // Undeclared exception!
      try { 
        binarySearchTree0.insert(binarySearchTree_Node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-293);
      intArray0[1] = (-1);
      intArray0[2] = 2843;
      intArray0[3] = (-101);
      intArray0[4] = (-2693);
      intArray0[5] = 635;
      intArray0[6] = 1665;
      BinarySearchTree binarySearchTree0 = new BinarySearchTree(intArray0);
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-829));
      BinarySearchTree.Node binarySearchTree_Node1 = binarySearchTree0.getRoot();
      assertNotNull(binarySearchTree_Node1);
      
      boolean boolean0 = binarySearchTree0.insert(binarySearchTree_Node0);
      assertTrue(boolean0);
      
      BinarySearchTree.Node binarySearchTree_Node2 = binarySearchTree_Node1.left;
      assertNotNull(binarySearchTree_Node2);
      assertEquals((-2693), binarySearchTree_Node2.data);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[3];
      intArray1[0] = 2176;
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node(2176);
      // Undeclared exception!
      try { 
        binarySearchTree0.getTree(intArray0, intArray1, binarySearchTree_Node0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinarySearchTree binarySearchTree0 = new BinarySearchTree();
      BinarySearchTree.Node binarySearchTree_Node0 = new BinarySearchTree.Node((-2935));
      BinarySearchTree.Node binarySearchTree_Node1 = new BinarySearchTree.Node((-2935));
      binarySearchTree_Node1.left = binarySearchTree_Node0;
      binarySearchTree_Node1.right = binarySearchTree_Node1.left;
      binarySearchTree0.postOrder(binarySearchTree_Node1);
      // Undeclared exception!
      try { 
        binarySearchTree0.find((-2935));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.byhieg.algorithmtutorial.BinarySearchTree", e);
      }
  }
}
