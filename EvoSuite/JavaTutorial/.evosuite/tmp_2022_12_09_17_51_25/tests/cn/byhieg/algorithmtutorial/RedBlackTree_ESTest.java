/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 00:51:02 GMT 2022
 */

package cn.byhieg.algorithmtutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.byhieg.algorithmtutorial.RedBlackTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedBlackTree_ESTest extends RedBlackTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(0);
      redBlackTree0.insertNode(0);
      redBlackTree0.insertNode(0);
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.find(0);
      redBlackTree0.insertNode(0);
      redBlackTree_Node0.makeBlack();
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.root;
      redBlackTree_Node1.makeRed();
      redBlackTree_Node0.setLeft(redBlackTree_Node1);
      RedBlackTree.Node redBlackTree_Node2 = redBlackTree_Node0.getLeft();
      redBlackTree_Node1.setLeft(redBlackTree_Node2);
      redBlackTree0.insertNode(2076);
      redBlackTree0.insertNode(redBlackTree_Node2);
      redBlackTree0.insertNode((-1));
      redBlackTree_Node0.makeRed();
      redBlackTree_Node1.setValue((-1));
      RedBlackTree.Node redBlackTree_Node3 = redBlackTree_Node1.getParent();
      redBlackTree_Node3.setLeft(redBlackTree_Node1);
      RedBlackTree.Node redBlackTree_Node4 = redBlackTree_Node2.getParent();
      redBlackTree_Node3.isRed();
      redBlackTree0.root = redBlackTree_Node0;
      redBlackTree_Node4.makeBlack();
      redBlackTree_Node0.setValue((-1));
      redBlackTree_Node3.makeRed();
      redBlackTree_Node3.setParent(redBlackTree_Node2);
      redBlackTree_Node4.setParent(redBlackTree_Node3);
      // Undeclared exception!
      redBlackTree0.insertNode(redBlackTree_Node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        redBlackTree0.find((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u662F\u7A7A\u7684
         //
         verifyException("cn.byhieg.algorithmtutorial.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      // Undeclared exception!
      try { 
        redBlackTree0.find((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u662F\u7A7A\u7684
         //
         verifyException("cn.byhieg.algorithmtutorial.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(0);
      redBlackTree0.insertNode(redBlackTree_Node0);
      redBlackTree_Node0.makeBlack();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insertNode(1);
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.root;
      redBlackTree0.root = redBlackTree_Node0;
      RedBlackTree.Node redBlackTree_Node1 = new RedBlackTree.Node();
      redBlackTree0.insertNode(3767);
      redBlackTree_Node1.makeBlack();
      redBlackTree_Node1.isRed();
      redBlackTree_Node0.setLeft(redBlackTree0.root);
      redBlackTree_Node0.setRight(redBlackTree_Node1);
      int int0 = 895;
      // Undeclared exception!
      redBlackTree0.find(895);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-40);
      RedBlackTree redBlackTree0 = new RedBlackTree((-40));
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.find((-40));
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.find((-40));
      redBlackTree0.root = redBlackTree_Node1;
      redBlackTree_Node1.setParent(redBlackTree0.root);
      RedBlackTree.Node redBlackTree_Node2 = new RedBlackTree.Node();
      redBlackTree_Node2.setParent(redBlackTree_Node0);
      redBlackTree_Node1.setParent(redBlackTree_Node2);
      redBlackTree0.root.makeRed();
      redBlackTree_Node2.makeRed();
      // Undeclared exception!
      redBlackTree0.insertNode(redBlackTree_Node2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(1494);
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.find(1494);
      redBlackTree_Node0.setValue(0);
      redBlackTree_Node0.setValue(1683);
      redBlackTree_Node0.isBlack();
      // Undeclared exception!
      redBlackTree0.insertNode(redBlackTree_Node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node();
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insertNode(redBlackTree_Node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(1);
      redBlackTree0.insertNode((-1604));
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node((-1604));
      redBlackTree0.find(1);
      redBlackTree0.insertNode(723);
      redBlackTree0.find(1);
      redBlackTree0.insertNode(redBlackTree_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree((-1));
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.root;
      redBlackTree_Node0.makeRed();
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.root;
      redBlackTree_Node1.makeRed();
      redBlackTree_Node0.isBlack();
      redBlackTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(1);
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.find(1);
      redBlackTree_Node0.makeRed();
      redBlackTree0.insertNode((-1604));
      redBlackTree_Node0.setValue((-1606));
      RedBlackTree.Node redBlackTree_Node1 = new RedBlackTree.Node(0);
      redBlackTree_Node0.setRight(redBlackTree_Node1);
      RedBlackTree.Node redBlackTree_Node2 = redBlackTree_Node0.getLeft();
      redBlackTree_Node2.setRight(redBlackTree_Node0);
      redBlackTree_Node2.setRight(redBlackTree_Node0);
      RedBlackTree.Node redBlackTree_Node3 = redBlackTree_Node0.getLeft();
      redBlackTree_Node2.getLeft();
      redBlackTree0.find(0);
      redBlackTree_Node3.setLeft((RedBlackTree.Node) null);
      redBlackTree_Node0.getRight();
      redBlackTree0.insertNode(redBlackTree_Node3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(0);
      RedBlackTree redBlackTree0 = new RedBlackTree(0);
      redBlackTree0.find(0);
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.find(0);
      redBlackTree_Node0.getValue();
      redBlackTree0.insertNode(0);
      redBlackTree_Node1.makeBlack();
      redBlackTree0.find((-2885));
      redBlackTree_Node1.setLeft(redBlackTree_Node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(1);
      RedBlackTree redBlackTree0 = new RedBlackTree(1);
      redBlackTree_Node0.setValue(1);
      redBlackTree0.insertNode(redBlackTree_Node0);
      redBlackTree0.insertNode(1);
      redBlackTree_Node0.getRight();
      redBlackTree_Node0.setParent((RedBlackTree.Node) null);
      redBlackTree0.find(1);
      redBlackTree0.insertNode(redBlackTree_Node0);
      redBlackTree_Node0.getLeft();
      // Undeclared exception!
      try { 
        redBlackTree0.insertNode((RedBlackTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(0);
      int int0 = 928;
      redBlackTree0.insertNode(928);
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.find(0);
      redBlackTree0.insertNode(redBlackTree_Node0);
      // Undeclared exception!
      redBlackTree0.insertNode(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(1);
      redBlackTree_Node0.getParent();
      redBlackTree_Node0.setParent((RedBlackTree.Node) null);
      redBlackTree_Node0.getParent();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(0);
      redBlackTree_Node0.getParent();
      redBlackTree_Node0.setRight((RedBlackTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(0);
      redBlackTree_Node0.setValue(0);
      redBlackTree_Node0.makeRed();
      redBlackTree_Node0.getValue();
      RedBlackTree.Node redBlackTree_Node1 = new RedBlackTree.Node((-3440), true);
      RedBlackTree redBlackTree0 = new RedBlackTree(1170);
      redBlackTree0.insertNode(redBlackTree_Node0);
      redBlackTree0.insertNode(redBlackTree_Node1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(1);
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node(0);
      redBlackTree0.insertNode(redBlackTree_Node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree((-1));
      redBlackTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node((-2516));
      redBlackTree_Node0.setValue(0);
      redBlackTree_Node0.makeBlack();
      redBlackTree_Node0.makeRed();
      redBlackTree_Node0.isRed();
      RedBlackTree redBlackTree0 = new RedBlackTree(453);
      redBlackTree0.find(0);
      redBlackTree0.find((-3498));
      redBlackTree0.root = redBlackTree_Node0;
      redBlackTree0.insertNode(0);
      redBlackTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree((-1198));
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node((-1198));
      redBlackTree0.insertNode((-1198));
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.root;
      redBlackTree_Node0.setLeft(redBlackTree_Node1);
      redBlackTree0.insertNode(redBlackTree_Node0);
      redBlackTree_Node0.getValue();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(1833);
      redBlackTree0.insertNode(1833);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insertNode(1496);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree(720);
      redBlackTree0.find(619);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree((-1477));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node((-2516));
      redBlackTree_Node0.makeBlack();
      redBlackTree_Node0.makeRed();
      redBlackTree_Node0.isRed();
      RedBlackTree redBlackTree0 = new RedBlackTree((-2516));
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.find((-2516));
      redBlackTree0.find((-3498));
      redBlackTree0.root = redBlackTree_Node0;
      redBlackTree0.insertNode(0);
      redBlackTree0.find(1);
      redBlackTree0.insertNode(redBlackTree_Node1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree((-1));
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.root;
      redBlackTree_Node0.makeRed();
      RedBlackTree.Node redBlackTree_Node1 = redBlackTree0.root;
      redBlackTree_Node0.isBlack();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-40);
      RedBlackTree redBlackTree0 = new RedBlackTree((-40));
      RedBlackTree.Node redBlackTree_Node0 = redBlackTree0.find((-40));
      redBlackTree0.root = redBlackTree_Node0;
      redBlackTree_Node0.setParent(redBlackTree0.root);
      RedBlackTree.Node redBlackTree_Node1 = new RedBlackTree.Node();
      redBlackTree_Node0.setParent(redBlackTree_Node1);
      redBlackTree0.root.makeRed();
      redBlackTree_Node1.makeRed();
      // Undeclared exception!
      redBlackTree0.insertNode(redBlackTree_Node1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1);
      RedBlackTree.Node redBlackTree_Node0 = null;
      RedBlackTree redBlackTree0 = new RedBlackTree((-1));
      RedBlackTree.Node redBlackTree_Node1 = new RedBlackTree.Node();
      redBlackTree0.root = redBlackTree_Node1;
      redBlackTree0.insertNode((-1));
      redBlackTree0.insertNode((-1));
      redBlackTree0.insertNode((-1));
      redBlackTree_Node1.getRight();
      redBlackTree_Node1.getRight();
      int int1 = (-1579);
      // Undeclared exception!
      try { 
        redBlackTree0.insertNode((RedBlackTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RedBlackTree.Node redBlackTree_Node0 = new RedBlackTree.Node();
      redBlackTree_Node0.setValue((-136));
      RedBlackTree.Node redBlackTree_Node1 = new RedBlackTree.Node((-136), true);
      redBlackTree_Node1.setLeft(redBlackTree_Node0);
      redBlackTree_Node1.makeRed();
      redBlackTree_Node0.setRight(redBlackTree_Node1);
      redBlackTree_Node0.setValue((-136));
      redBlackTree_Node0.makeRed();
      RedBlackTree.Node redBlackTree_Node2 = redBlackTree_Node0.getRight();
      redBlackTree_Node2.setParent(redBlackTree_Node0);
      redBlackTree_Node0.makeBlack();
      redBlackTree_Node0.makeBlack();
      redBlackTree_Node2.setRight(redBlackTree_Node0);
      redBlackTree_Node0.setLeft(redBlackTree_Node2);
      RedBlackTree.Node redBlackTree_Node3 = redBlackTree_Node2.getRight();
      redBlackTree_Node0.isBlack();
      redBlackTree_Node2.setLeft(redBlackTree_Node3);
      redBlackTree_Node0.isRed();
      RedBlackTree.Node redBlackTree_Node4 = redBlackTree_Node2.getLeft();
      redBlackTree_Node4.getParent();
      redBlackTree_Node4.makeRed();
      RedBlackTree redBlackTree0 = new RedBlackTree();
      // Undeclared exception!
      try { 
        redBlackTree0.find((-136));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u6811\u662F\u7A7A\u7684
         //
         verifyException("cn.byhieg.algorithmtutorial.RedBlackTree", e);
      }
  }
}
