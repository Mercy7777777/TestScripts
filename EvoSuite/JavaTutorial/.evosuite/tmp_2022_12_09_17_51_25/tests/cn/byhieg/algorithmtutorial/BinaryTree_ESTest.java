/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 00:29:17 GMT 2022
 */

package cn.byhieg.algorithmtutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.byhieg.algorithmtutorial.BinaryTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryTree_ESTest extends BinaryTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(33);
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      binaryTree_Node1.right = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = binaryTree_Node1.right;
      binaryTree_Node1.right.left = binaryTree_Node2;
      binaryTree_Node2.right = binaryTree_Node1.right;
      binaryTree_Node2.right = binaryTree_Node0;
      // Undeclared exception!
      BinaryTree.calcKNodes(binaryTree_Node2, 33);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      BinaryTree.postOrder2(binaryTree_Node0);
      BinaryTree.levelOrder(binaryTree_Node0);
      BinaryTree.mirror(binaryTree_Node0);
      BinaryTree.preOrder1(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      binaryTree_Node1.data = 1;
      BinaryTree.getHeight(binaryTree_Node1);
      binaryTree_Node1.data = 1;
      BinaryTree.getHeight(binaryTree_Node1);
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree_Node1.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      BinaryTree.levelOrder(binaryTree_Node1);
      BinaryTree.levelOrder(binaryTree_Node2);
      BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      BinaryTree binaryTree0 = new BinaryTree();
      BinaryTree.inOrder2(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-1253));
      binaryTree_Node3.right = binaryTree_Node0;
      BinaryTree.calcKNodes(binaryTree_Node3, (-441));
      BinaryTree.findLCA(binaryTree_Node3, binaryTree_Node1, binaryTree_Node2);
      BinaryTree.getNodes(binaryTree_Node2);
      BinaryTree.calcKNodes(binaryTree_Node1.left, 1);
      BinaryTree.postOrder2(binaryTree_Node0);
      BinaryTree.postOrder2(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1720));
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1720));
      binaryTree_Node0.data = 4173;
      binaryTree_Node0.right = binaryTree_Node1;
      BinaryTree.levelOrder(binaryTree_Node0);
      binaryTree_Node1.left = binaryTree_Node0.right;
      binaryTree_Node1.data = (-1);
      binaryTree_Node0.right.right = binaryTree_Node1;
      BinaryTree.postOrder1(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-2704));
      binaryTree_Node1.right = binaryTree_Node0;
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree_Node1.right = binaryTree_Node0.left;
      binaryTree_Node0.left.left = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = binaryTree_Node0.left;
      BinaryTree.inOrder1(binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(354);
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree_Node1.data = 354;
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.preOrder1(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3585;
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(3585);
      assertEquals(3585, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(3585, binaryTree_Node0.data);
      assertEquals(3585, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA(binaryTree_Node1, binaryTree_Node0, binaryTree_Node0);
      assertEquals(3585, binaryTree_Node0.data);
      assertEquals(3585, binaryTree_Node1.data);
      assertEquals(3585, binaryTree_Node2.data);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node2, binaryTree_Node0);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node0.left = binaryTree_Node2;
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node3 = binaryTree_Node1.left;
      assertEquals(3585, binaryTree_Node3.data);
      assertSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node1.right = binaryTree_Node3;
      binaryTree_Node3.data = 3585;
      binaryTree_Node1.left.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node4 = binaryTree_Node0.right;
      assertEquals(3585, binaryTree_Node4.data);
      assertSame(binaryTree_Node4, binaryTree_Node3);
      assertSame(binaryTree_Node4, binaryTree_Node0);
      assertSame(binaryTree_Node4, binaryTree_Node2);
      assertSame(binaryTree_Node4, binaryTree_Node1);
      assertNotNull(binaryTree_Node4);
      
      binaryTree_Node4.data = (-278);
      binaryTree_Node2.left = binaryTree_Node3;
      binaryTree_Node1.left = binaryTree_Node4;
      BinaryTree.Node binaryTree_Node5 = BinaryTree.findLCA(binaryTree_Node3, binaryTree_Node0, binaryTree_Node3);
      assertEquals((-278), binaryTree_Node0.data);
      assertEquals((-278), binaryTree_Node1.data);
      assertEquals((-278), binaryTree_Node3.data);
      assertEquals((-278), binaryTree_Node5.data);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node0, binaryTree_Node4);
      assertSame(binaryTree_Node0, binaryTree_Node5);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node1, binaryTree_Node4);
      assertSame(binaryTree_Node1, binaryTree_Node5);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node5);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertSame(binaryTree_Node3, binaryTree_Node4);
      assertSame(binaryTree_Node5, binaryTree_Node0);
      assertSame(binaryTree_Node5, binaryTree_Node3);
      assertSame(binaryTree_Node5, binaryTree_Node1);
      assertSame(binaryTree_Node5, binaryTree_Node4);
      assertSame(binaryTree_Node5, binaryTree_Node2);
      assertNotNull(binaryTree_Node5);
      
      BinaryTree.getLeafs(binaryTree_Node3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(495);
      assertEquals(495, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(495, binaryTree_Node0.data);
      assertEquals(495, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(495, binaryTree_Node0.data);
      assertEquals(495, binaryTree_Node2.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertSame(binaryTree_Node2, binaryTree_Node0);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node2.right = binaryTree_Node0;
      BinaryTree.mirror(binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-2493));
      assertEquals((-2493), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-2493));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-2493), binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.left = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = binaryTree_Node0.left;
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-2493), binaryTree_Node2.data);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node2.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node2, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertEquals((-2493), binaryTree_Node0.data);
      assertEquals((-2493), binaryTree_Node2.data);
      assertEquals((-2493), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node2, binaryTree_Node3);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node2.left = binaryTree_Node0;
      binaryTree_Node3.left = binaryTree_Node0;
      binaryTree_Node3.data = (-2493);
      binaryTree_Node3.right = binaryTree_Node0;
      binaryTree_Node3.data = (-2493);
      int int0 = BinaryTree.calcKNodes(binaryTree_Node3, 0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertEquals((-2493), binaryTree_Node0.data);
      assertEquals((-2493), binaryTree_Node2.data);
      assertEquals((-2493), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node2, binaryTree_Node3);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        BinaryTree.getHeight(binaryTree_Node2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1225;
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1225);
      assertEquals(1225, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1225);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1225, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.right = binaryTree_Node1;
      binaryTree_Node0.right = binaryTree_Node1;
      binaryTree_Node0.data = 1225;
      BinaryTree.mirror(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(int1 == int0);
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(2, int1);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.postOrder1(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      binaryTree_Node0.right.data = (-2126);
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      int int2 = BinaryTree.getNodes(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(2, int2);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1225, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1225);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1225, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node2.right = binaryTree_Node1;
      binaryTree_Node2.left = binaryTree_Node0;
      binaryTree_Node2.right.right = binaryTree_Node0.right;
      binaryTree_Node2.left = binaryTree_Node0;
      BinaryTree.getNodes(binaryTree_Node2);
      binaryTree_Node0.right.right = binaryTree_Node2.right;
      BinaryTree.calcKNodes(binaryTree_Node0.right, int0);
      BinaryTree.calcKNodes(binaryTree_Node0, int2);
      int int3 = 1007;
      int int4 = 1904;
      binaryTree_Node0.right.left = binaryTree_Node0.right.right;
      binaryTree_Node0.right.data = int4;
      binaryTree_Node0.data = int3;
      BinaryTree.Node binaryTree_Node3 = binaryTree_Node0.right;
      BinaryTree.getLeafs(binaryTree_Node3);
      BinaryTree.inOrder1(binaryTree_Node0.right);
      BinaryTree.getLeafs(binaryTree_Node2.left);
      BinaryTree.inOrder1(binaryTree_Node2.left);
      BinaryTree.inOrder2(binaryTree_Node0.right);
      BinaryTree.levelOrder(binaryTree_Node1);
      BinaryTree.inOrder1(binaryTree_Node0.right);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryTree.postOrder1((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-4156));
      assertEquals((-4156), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals((-4156), binaryTree_Node0.data);
      assertEquals((-4156), binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertEquals((-4156), binaryTree_Node0.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-458));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-458), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node2.data = (-4156);
      BinaryTree.postOrder1(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-4156), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      binaryTree_Node2.data = (-1);
      int int0 = BinaryTree.getNodes(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertEquals(1, int0);
      
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertEquals((-1), binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node3.left = binaryTree_Node1;
      int int1 = BinaryTree.getLeafs(binaryTree_Node3);
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals((-1), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertEquals(1, int1);
      
      int int2 = BinaryTree.getLeafs(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-4156), binaryTree_Node0.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertEquals(1, int2);
      
      int int3 = BinaryTree.calcKNodes(binaryTree_Node1, (-1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-4156), binaryTree_Node0.data);
      assertEquals((-4156), binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      BinaryTree.postOrder2(binaryTree_Node1);
      assertEquals(0, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertEquals(0, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.mirror(binaryTree_Node1);
      assertEquals(0, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.preOrder1(binaryTree_Node1);
      assertEquals(0, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(0, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node2.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(0, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertEquals(1, int0);
      
      binaryTree_Node2.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertEquals(1, int1);
      
      binaryTree_Node2.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node2.left = binaryTree_Node3;
      binaryTree_Node2.left.right = binaryTree_Node3;
      // Undeclared exception!
      BinaryTree.levelOrder(binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      assertEquals(0, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-2575));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-2575), binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.left = binaryTree_Node1;
      BinaryTree.mirror(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(0, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      int int0 = BinaryTree.getHeight(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(0, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(2, int0);
      
      int int1 = BinaryTree.getNodes(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(2, int1);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(0, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = binaryTree_Node0.left;
      assertNull(binaryTree_Node2);
      
      BinaryTree.mirror((BinaryTree.Node) null);
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(0, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.inOrder2((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.calcKNodes(binaryTree_Node0, 0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node0.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertTrue(boolean0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      assertEquals((-1), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      binaryTree_Node0.data = 327;
      int int0 = 0;
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      binaryTree_Node0.left = binaryTree_Node1;
      // Undeclared exception!
      BinaryTree.preOrder2(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      binaryTree_Node1.left.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node1.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node1.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertTrue(boolean0);
      
      binaryTree_Node1.right = binaryTree_Node2;
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertEquals((-1253), binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      int int2 = BinaryTree.calcKNodes(binaryTree_Node3, (-441));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1253), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertEquals(0, int2);
      
      int int3 = BinaryTree.calcKNodes(binaryTree_Node1, 1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertEquals(2, int3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree_Node1.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertEquals((-1253), binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      int int2 = BinaryTree.calcKNodes(binaryTree_Node3, (-441));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1253), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertEquals(0, int2);
      
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node3, binaryTree_Node1, binaryTree_Node2);
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertEquals((-1253), binaryTree_Node3.data);
      assertEquals(0, binaryTree_Node1.data);
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNull(binaryTree_Node4);
      
      int int3 = BinaryTree.getNodes(binaryTree_Node2);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertEquals(1, int3);
      
      int int4 = BinaryTree.calcKNodes(binaryTree_Node1.left, 1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(binaryTree_Node1.left.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.left.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.left.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertEquals(1, binaryTree_Node1.left.data);
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1.left, binaryTree_Node0);
      assertNotSame(binaryTree_Node1.left, binaryTree_Node1);
      assertNotSame(binaryTree_Node1.left, binaryTree_Node3);
      assertSame(binaryTree_Node1.left, binaryTree_Node2);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertEquals(0, int4);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree.inOrder1(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      int int2 = BinaryTree.calcKNodes((BinaryTree.Node) null, 2646);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      binaryTree_Node2.right = binaryTree_Node1;
      BinaryTree.levelOrder((BinaryTree.Node) null);
      int int3 = BinaryTree.calcKNodes(binaryTree_Node1, 0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int3);
      
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node3.data);
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node3.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node3, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node3.data);
      assertEquals(1, binaryTree_Node1.data);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNull(binaryTree_Node4);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node2, binaryTree_Node2.right);
      assertFalse(boolean1 == boolean0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertFalse(boolean1);
      
      int int4 = BinaryTree.getLeafs(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertEquals(1, int4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(10);
      assertEquals(10, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      int int0 = 1884;
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(10);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(10, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.right = binaryTree_Node0;
      binaryTree_Node0.left = binaryTree_Node1;
      // Undeclared exception!
      BinaryTree.postOrder2(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      assertEquals(0, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1538));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-1538), binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder1(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      BinaryTree.mirror((BinaryTree.Node) null);
      BinaryTree.postOrder2((BinaryTree.Node) null);
      BinaryTree.postOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(0, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = binaryTree_Node1.left;
      assertEquals(1, binaryTree_Node2.data);
      assertSame(binaryTree_Node2, binaryTree_Node0);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotNull(binaryTree_Node2);
      
      // Undeclared exception!
      BinaryTree.postOrder2(binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder1(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      int int2 = BinaryTree.calcKNodes(binaryTree_Node2, 0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertEquals(1, int2);
      
      int int3 = BinaryTree.calcKNodes((BinaryTree.Node) null, 2646);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      binaryTree_Node1.left = binaryTree_Node1;
      BinaryTree.levelOrder((BinaryTree.Node) null);
      int int4 = BinaryTree.calcKNodes(binaryTree_Node1, 0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int4);
      
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node3.data);
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node3.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node3, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node3.data);
      assertEquals(1, binaryTree_Node1.data);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNull(binaryTree_Node4);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node2, (BinaryTree.Node) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertFalse(boolean1);
      
      BinaryTree.Node binaryTree_Node5 = new BinaryTree.Node(1862);
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node1));
      assertEquals(1862, binaryTree_Node5.data);
      assertNotNull(binaryTree_Node5);
      
      int int5 = BinaryTree.getLeafs(binaryTree_Node5);
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node1));
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertEquals(1862, binaryTree_Node5.data);
      assertNotSame(binaryTree_Node5, binaryTree_Node2);
      assertNotSame(binaryTree_Node5, binaryTree_Node3);
      assertNotSame(binaryTree_Node5, binaryTree_Node0);
      assertNotSame(binaryTree_Node5, binaryTree_Node1);
      assertEquals(1, int5);
      
      BinaryTree.Node binaryTree_Node6 = binaryTree_Node2.right;
      assertNull(binaryTree_Node6);
      
      boolean boolean2 = BinaryTree.isCommon((BinaryTree.Node) null, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node5);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getHeight(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.right;
      assertNull(binaryTree_Node1);
      
      BinaryTree.inOrder2((BinaryTree.Node) null);
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder((BinaryTree.Node) null);
      binaryTree_Node0.data = 1875;
      binaryTree_Node0.left = null;
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertEquals(1875, binaryTree_Node0.data);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder1(binaryTree_Node0);
      assertEquals(1875, binaryTree_Node0.data);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertEquals(1875, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      int int2 = BinaryTree.calcKNodes(binaryTree_Node2, (-441));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertEquals(0, int2);
      
      int int3 = BinaryTree.getLeafs(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1875, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertEquals(1, int3);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1875, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertTrue(boolean1 == boolean0);
      assertEquals(1875, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertTrue(boolean1);
      
      boolean boolean2 = BinaryTree.isCommon((BinaryTree.Node) null, binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(256);
      assertEquals(256, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.right;
      assertNull(binaryTree_Node1);
      
      boolean boolean0 = BinaryTree.isCommon((BinaryTree.Node) null, (BinaryTree.Node) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.inOrder1(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      int int2 = BinaryTree.calcKNodes(binaryTree_Node2, (-47));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertEquals(0, int2);
      
      int int3 = BinaryTree.calcKNodes((BinaryTree.Node) null, 2646);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      binaryTree_Node2.right = binaryTree_Node1;
      BinaryTree.levelOrder((BinaryTree.Node) null);
      int int4 = BinaryTree.calcKNodes(binaryTree_Node1, 0);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertEquals(1, int4);
      
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertEquals(0, binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node3.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node3, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node4.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node4.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node4.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node3.data);
      assertEquals(1, binaryTree_Node4.data);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node4);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node4);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node4, binaryTree_Node1);
      assertNotSame(binaryTree_Node4, binaryTree_Node2);
      assertSame(binaryTree_Node4, binaryTree_Node0);
      assertNotSame(binaryTree_Node4, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node4);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotNull(binaryTree_Node4);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node2, binaryTree_Node2.right);
      assertFalse(boolean1 == boolean0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node4);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertFalse(boolean1);
      
      BinaryTree.Node binaryTree_Node5 = new BinaryTree.Node(1877);
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node4));
      assertEquals(1877, binaryTree_Node5.data);
      assertNotNull(binaryTree_Node5);
      
      int int5 = BinaryTree.getLeafs(binaryTree_Node5);
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node4));
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(1877, binaryTree_Node5.data);
      assertNotSame(binaryTree_Node5, binaryTree_Node1);
      assertNotSame(binaryTree_Node5, binaryTree_Node0);
      assertNotSame(binaryTree_Node5, binaryTree_Node2);
      assertNotSame(binaryTree_Node5, binaryTree_Node3);
      assertNotSame(binaryTree_Node5, binaryTree_Node4);
      assertEquals(1, int5);
      
      BinaryTree.Node binaryTree_Node6 = binaryTree_Node2.right;
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node6.data);
      assertNotSame(binaryTree_Node6, binaryTree_Node5);
      assertNotSame(binaryTree_Node6, binaryTree_Node3);
      assertNotSame(binaryTree_Node6, binaryTree_Node4);
      assertNotSame(binaryTree_Node6, binaryTree_Node2);
      assertSame(binaryTree_Node6, binaryTree_Node1);
      assertNotSame(binaryTree_Node6, binaryTree_Node0);
      assertNotNull(binaryTree_Node6);
      
      boolean boolean2 = BinaryTree.isCommon(binaryTree_Node6, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node5));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node6.data);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node5);
      assertNotSame(binaryTree_Node0, binaryTree_Node6);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node4);
      assertNotSame(binaryTree_Node6, binaryTree_Node5);
      assertNotSame(binaryTree_Node6, binaryTree_Node3);
      assertNotSame(binaryTree_Node6, binaryTree_Node4);
      assertNotSame(binaryTree_Node6, binaryTree_Node2);
      assertSame(binaryTree_Node6, binaryTree_Node1);
      assertNotSame(binaryTree_Node6, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node6);
      assertNotSame(binaryTree_Node2, binaryTree_Node4);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node5);
      assertFalse(boolean2);
      
      BinaryTree.Node binaryTree_Node7 = BinaryTree.findLCA(binaryTree_Node6, binaryTree_Node1.left, binaryTree_Node1.left);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node4));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node5));
      assertEquals(1, binaryTree_Node1.data);
      assertEquals(1, binaryTree_Node6.data);
      assertEquals(1, binaryTree_Node7.data);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node7);
      assertNotSame(binaryTree_Node1, binaryTree_Node5);
      assertSame(binaryTree_Node1, binaryTree_Node6);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node4);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node6, binaryTree_Node5);
      assertNotSame(binaryTree_Node6, binaryTree_Node3);
      assertNotSame(binaryTree_Node6, binaryTree_Node4);
      assertNotSame(binaryTree_Node6, binaryTree_Node2);
      assertSame(binaryTree_Node6, binaryTree_Node1);
      assertNotSame(binaryTree_Node6, binaryTree_Node0);
      assertNotSame(binaryTree_Node6, binaryTree_Node7);
      assertSame(binaryTree_Node7, binaryTree_Node4);
      assertNotSame(binaryTree_Node7, binaryTree_Node6);
      assertSame(binaryTree_Node7, binaryTree_Node0);
      assertNotSame(binaryTree_Node7, binaryTree_Node5);
      assertNotSame(binaryTree_Node7, binaryTree_Node1);
      assertNotSame(binaryTree_Node7, binaryTree_Node2);
      assertNotSame(binaryTree_Node7, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node6);
      assertNotSame(binaryTree_Node2, binaryTree_Node4);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node5);
      assertNotSame(binaryTree_Node2, binaryTree_Node7);
      assertNotNull(binaryTree_Node7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree_Node1.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node0.left, binaryTree_Node2, binaryTree_Node2);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.left.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node0.left.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node3.data);
      assertEquals(0, binaryTree_Node1.data);
      assertEquals(1, binaryTree_Node2.data);
      assertEquals(0, binaryTree_Node0.left.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertSame(binaryTree_Node0.left, binaryTree_Node1);
      assertNotSame(binaryTree_Node0.left, binaryTree_Node0);
      assertNotSame(binaryTree_Node0.left, binaryTree_Node3);
      assertNotSame(binaryTree_Node0.left, binaryTree_Node2);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node1.left.right = binaryTree_Node2;
      binaryTree_Node1.left.right = binaryTree_Node3;
      // Undeclared exception!
      BinaryTree.inOrder2(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      binaryTree_Node0.right = binaryTree_Node2;
      binaryTree_Node2.data = 793;
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(793, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0.right, binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node0.right.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.right.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(793, binaryTree_Node3.data);
      assertEquals(0, binaryTree_Node1.data);
      assertEquals(793, binaryTree_Node2.data);
      assertEquals(793, binaryTree_Node0.right.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node0.right, binaryTree_Node1);
      assertSame(binaryTree_Node0.right, binaryTree_Node3);
      assertSame(binaryTree_Node0.right, binaryTree_Node2);
      assertNotSame(binaryTree_Node0.right, binaryTree_Node0);
      assertNotNull(binaryTree_Node3);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node1, binaryTree_Node3);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node0.right.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.right.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(793, binaryTree_Node3.data);
      assertEquals(0, binaryTree_Node1.data);
      assertEquals(793, binaryTree_Node2.data);
      assertEquals(793, binaryTree_Node0.right.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node0.right, binaryTree_Node1);
      assertSame(binaryTree_Node0.right, binaryTree_Node3);
      assertSame(binaryTree_Node0.right, binaryTree_Node2);
      assertNotSame(binaryTree_Node0.right, binaryTree_Node0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(3242);
      assertEquals(3242, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(3242, binaryTree_Node0.data);
      assertEquals(3242, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      binaryTree_Node1.data = 0;
      binaryTree_Node1.data = 3242;
      BinaryTree.Node binaryTree_Node2 = binaryTree_Node1.left;
      assertNull(binaryTree_Node2);
      
      BinaryTree.mirror((BinaryTree.Node) null);
      BinaryTree.preOrder1(binaryTree_Node1);
      assertEquals(3242, binaryTree_Node0.data);
      assertEquals(3242, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.mirror((BinaryTree.Node) null);
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-3419));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertEquals((-3419), binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      BinaryTree.preOrder1(binaryTree_Node3);
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertEquals((-3419), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node3);
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertEquals((-3419), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertEquals(1, int0);
      
      BinaryTree.preOrder2(binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertEquals(3242, binaryTree_Node0.data);
      assertEquals(3242, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node3, binaryTree_Node0, binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertEquals(3242, binaryTree_Node0.data);
      assertEquals(3242, binaryTree_Node1.data);
      assertEquals((-3419), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNull(binaryTree_Node4);
      
      BinaryTree.Node binaryTree_Node5 = BinaryTree.findLCA((BinaryTree.Node) null, binaryTree_Node1, (BinaryTree.Node) null);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertEquals(3242, binaryTree_Node0.data);
      assertEquals(3242, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNull(binaryTree_Node5);
      
      BinaryTree.Node binaryTree_Node6 = BinaryTree.findLCA((BinaryTree.Node) null, (BinaryTree.Node) null, (BinaryTree.Node) null);
      assertNull(binaryTree_Node6);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(3851);
      assertEquals(3851, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.right;
      assertNull(binaryTree_Node1);
      
      BinaryTree.inOrder1((BinaryTree.Node) null);
      BinaryTree.preOrder2((BinaryTree.Node) null);
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-80));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-80), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-80), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(3851, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      
      binaryTree_Node0.data = (-80);
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-662));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertEquals((-662), binaryTree_Node3.data);
      assertNotNull(binaryTree_Node3);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node3);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertEquals((-80), binaryTree_Node0.data);
      assertEquals((-662), binaryTree_Node3.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertTrue(boolean0);
      
      int int0 = BinaryTree.getNodes((BinaryTree.Node) null);
      assertEquals(0, int0);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals((-80), binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node0, (BinaryTree.Node) null);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertEquals((-80), binaryTree_Node0.data);
      assertEquals((-80), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNull(binaryTree_Node4);
      
      BinaryTree.inOrder2((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.data = 0;
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
      
      binaryTree_Node1.data = 0;
      int int1 = BinaryTree.getHeight(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertTrue(int1 == int0);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int1);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node1.left = binaryTree_Node2;
      BinaryTree.inOrder2(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node2);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node1, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(boolean1 == boolean0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.preOrder1(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.inOrder2(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.inOrder1(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      binaryTree_Node0.left = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      int int2 = BinaryTree.calcKNodes(binaryTree_Node2, (-47));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertEquals(0, int2);
      
      int int3 = 2646;
      BinaryTree.calcKNodes(binaryTree_Node0.left, int3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-616));
      assertEquals((-616), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1337));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-1337), binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA(binaryTree_Node0, (BinaryTree.Node) null, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-616), binaryTree_Node0.data);
      assertEquals((-616), binaryTree_Node2.data);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertSame(binaryTree_Node2, binaryTree_Node0);
      assertNotNull(binaryTree_Node2);
      
      binaryTree_Node2.data = 973;
      int int0 = BinaryTree.getLeafs(binaryTree_Node2);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals(973, binaryTree_Node0.data);
      assertEquals(973, binaryTree_Node2.data);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertSame(binaryTree_Node2, binaryTree_Node0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.left;
      assertNull(binaryTree_Node1);
      
      BinaryTree.preOrder1((BinaryTree.Node) null);
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA(binaryTree_Node0, (BinaryTree.Node) null, (BinaryTree.Node) null);
      assertEquals(1, binaryTree_Node0.data);
      assertNull(binaryTree_Node2);
      
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node3.data);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotNull(binaryTree_Node3);
      
      BinaryTree.Node binaryTree_Node4 = binaryTree_Node3.left;
      assertNull(binaryTree_Node4);
      
      int int0 = BinaryTree.getNodes((BinaryTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(724);
      assertEquals(724, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.right;
      assertNull(binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA((BinaryTree.Node) null, binaryTree_Node0, (BinaryTree.Node) null);
      assertEquals(724, binaryTree_Node0.data);
      assertNull(binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      assertEquals((-1), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      binaryTree_Node0.data = (-1);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(0, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.right = binaryTree_Node0;
      binaryTree_Node1.right = binaryTree_Node0;
      binaryTree_Node0.left = binaryTree_Node1;
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node1, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-1), binaryTree_Node0.data);
      assertEquals(0, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      BinaryTree.preOrder2(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryTree.mirror((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(525);
      assertEquals(525, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(525, binaryTree_Node0.data);
      assertEquals(525, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertEquals(525, binaryTree_Node0.data);
      assertEquals(525, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.inOrder1(binaryTree_Node1);
      assertEquals(525, binaryTree_Node0.data);
      assertEquals(525, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node1);
      assertEquals(525, binaryTree_Node0.data);
      assertEquals(525, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertTrue(boolean0);
      
      int int0 = BinaryTree.calcKNodes(binaryTree_Node0, 525);
      assertEquals(525, binaryTree_Node0.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1492);
      assertEquals(1492, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      int int0 = BinaryTree.calcKNodes(binaryTree_Node0, 0);
      assertEquals(1492, binaryTree_Node0.data);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.right;
      assertNull(binaryTree_Node1);
      
      int int0 = BinaryTree.calcKNodes((BinaryTree.Node) null, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(55);
      assertEquals(55, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(55, binaryTree_Node0.data);
      assertEquals(55, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      int int0 = BinaryTree.getHeight(binaryTree_Node1);
      assertEquals(55, binaryTree_Node0.data);
      assertEquals(55, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(2729);
      assertEquals(2729, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node0);
      assertEquals(2729, binaryTree_Node0.data);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(327);
      assertEquals(327, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals(327, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getHeight((BinaryTree.Node) null);
      assertEquals(0, int0);
      
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(327, binaryTree_Node0.data);
      
      BinaryTree.preOrder2(binaryTree_Node0);
      assertEquals(327, binaryTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = BinaryTree.getNodes((BinaryTree.Node) null);
      assertEquals(0, int0);
      
      BinaryTree.levelOrder((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1557));
      assertEquals((-1557), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2(binaryTree_Node0);
      assertEquals((-1557), binaryTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = BinaryTree.getLeafs((BinaryTree.Node) null);
      assertEquals(0, int0);
      
      BinaryTree.postOrder2((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      assertEquals((-1), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertEquals((-1), binaryTree_Node0.data);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-4033));
      assertEquals((-4033), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals((-4033), binaryTree_Node0.data);
      assertEquals((-4033), binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.inOrder1(binaryTree_Node0);
      assertEquals((-4033), binaryTree_Node0.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      
      int int0 = BinaryTree.getNodes(binaryTree_Node0);
      assertEquals((-4033), binaryTree_Node0.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = BinaryTree.getNodes((BinaryTree.Node) null);
      assertEquals(0, int0);
      
      BinaryTree.inOrder1((BinaryTree.Node) null);
      int int1 = BinaryTree.getHeight((BinaryTree.Node) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      assertEquals(0, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      assertNotNull(binaryTree0);
      
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(2635);
      assertEquals(2635, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder1(binaryTree_Node0);
      assertEquals(2635, binaryTree_Node0.data);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-4470));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-4470), binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.preOrder1(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-4470), binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      int int0 = BinaryTree.getNodes(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(2635, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(906);
      assertEquals(906, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.right;
      assertNull(binaryTree_Node1);
      
      BinaryTree.preOrder1((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(4198);
      assertEquals(4198, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(4198);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(4198, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA(binaryTree_Node1, binaryTree_Node1, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(4198, binaryTree_Node0.data);
      assertEquals(4198, binaryTree_Node1.data);
      assertEquals(4198, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotNull(binaryTree_Node2);
      
      BinaryTree.Node binaryTree_Node3 = binaryTree_Node2.right;
      assertNull(binaryTree_Node3);
      
      binaryTree_Node0.left = null;
      int int0 = BinaryTree.getNodes(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(4198, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.calcKNodes((BinaryTree.Node) null, 2431);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      binaryTree_Node1.right = binaryTree_Node0;
      binaryTree_Node1.left = binaryTree_Node0;
      int int2 = BinaryTree.getHeight((BinaryTree.Node) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node2, binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertEquals(4198, binaryTree_Node0.data);
      assertEquals(4198, binaryTree_Node1.data);
      assertEquals(4198, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNull(binaryTree_Node4);
      
      int int3 = BinaryTree.getHeight(binaryTree_Node2);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4198, binaryTree_Node0.data);
      assertEquals(4198, binaryTree_Node1.data);
      assertEquals(4198, binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertEquals(2, int3);
      
      int int4 = BinaryTree.getLeafs((BinaryTree.Node) null);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      BinaryTree.Node binaryTree_Node5 = BinaryTree.findLCA(binaryTree_Node2, (BinaryTree.Node) null, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node0));
      assertEquals(4198, binaryTree_Node0.data);
      assertEquals(4198, binaryTree_Node1.data);
      assertEquals(4198, binaryTree_Node2.data);
      assertEquals(4198, binaryTree_Node5.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node5);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node1, binaryTree_Node5);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node5);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node5, binaryTree_Node0);
      assertSame(binaryTree_Node5, binaryTree_Node1);
      assertSame(binaryTree_Node5, binaryTree_Node2);
      assertNotNull(binaryTree_Node5);
      
      BinaryTree.Node binaryTree_Node6 = binaryTree_Node5.left;
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node1));
      assertEquals(4198, binaryTree_Node6.data);
      assertSame(binaryTree_Node6, binaryTree_Node0);
      assertNotSame(binaryTree_Node6, binaryTree_Node2);
      assertNotSame(binaryTree_Node6, binaryTree_Node5);
      assertNotSame(binaryTree_Node6, binaryTree_Node1);
      assertNotNull(binaryTree_Node6);
      
      BinaryTree.Node binaryTree_Node7 = BinaryTree.findLCA(binaryTree_Node5, (BinaryTree.Node) null, binaryTree_Node6);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node5.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node6.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node6));
      assertFalse(binaryTree_Node7.equals((Object)binaryTree_Node0));
      assertEquals(4198, binaryTree_Node0.data);
      assertEquals(4198, binaryTree_Node1.data);
      assertEquals(4198, binaryTree_Node2.data);
      assertEquals(4198, binaryTree_Node5.data);
      assertEquals(4198, binaryTree_Node6.data);
      assertEquals(4198, binaryTree_Node7.data);
      assertSame(binaryTree_Node0, binaryTree_Node6);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node5);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node7);
      assertNotSame(binaryTree_Node1, binaryTree_Node6);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node1, binaryTree_Node5);
      assertSame(binaryTree_Node1, binaryTree_Node7);
      assertSame(binaryTree_Node1, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node5);
      assertNotSame(binaryTree_Node2, binaryTree_Node6);
      assertSame(binaryTree_Node2, binaryTree_Node1);
      assertSame(binaryTree_Node2, binaryTree_Node7);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node5, binaryTree_Node0);
      assertSame(binaryTree_Node5, binaryTree_Node7);
      assertSame(binaryTree_Node5, binaryTree_Node1);
      assertSame(binaryTree_Node5, binaryTree_Node2);
      assertNotSame(binaryTree_Node5, binaryTree_Node6);
      assertSame(binaryTree_Node6, binaryTree_Node0);
      assertNotSame(binaryTree_Node6, binaryTree_Node2);
      assertNotSame(binaryTree_Node6, binaryTree_Node5);
      assertNotSame(binaryTree_Node6, binaryTree_Node1);
      assertNotSame(binaryTree_Node6, binaryTree_Node7);
      assertSame(binaryTree_Node7, binaryTree_Node5);
      assertNotSame(binaryTree_Node7, binaryTree_Node6);
      assertSame(binaryTree_Node7, binaryTree_Node1);
      assertNotSame(binaryTree_Node7, binaryTree_Node0);
      assertSame(binaryTree_Node7, binaryTree_Node2);
      assertNotNull(binaryTree_Node7);
      
      int int5 = BinaryTree.getNodes(binaryTree_Node0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node5));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node7));
      assertEquals(4198, binaryTree_Node0.data);
      assertSame(binaryTree_Node0, binaryTree_Node6);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node5);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertNotSame(binaryTree_Node0, binaryTree_Node7);
      assertEquals(1, int5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.postOrder2((BinaryTree.Node) null);
      BinaryTree.levelOrder(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      BinaryTree.mirror(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      
      int int0 = BinaryTree.getLeafs(binaryTree_Node0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int0);
      
      int int1 = BinaryTree.getHeight(binaryTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, int1);
      
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      BinaryTree.levelOrder(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertTrue(boolean0);
      
      BinaryTree.inOrder1(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals(1, binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      
      BinaryTree.inOrder2(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1253));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotNull(binaryTree_Node2);
      
      int int2 = BinaryTree.calcKNodes((BinaryTree.Node) null, 2646);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      binaryTree_Node2.right = binaryTree_Node1;
      BinaryTree.levelOrder((BinaryTree.Node) null);
      BinaryTree.Node binaryTree_Node3 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node1);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node1.data);
      assertEquals(1, binaryTree_Node3.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNotNull(binaryTree_Node3);
      
      binaryTree_Node3.right = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node4 = BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node3, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node3.equals((Object)binaryTree_Node1));
      assertEquals(1, binaryTree_Node0.data);
      assertEquals(1, binaryTree_Node1.data);
      assertEquals((-1253), binaryTree_Node2.data);
      assertEquals(1, binaryTree_Node3.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node3);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertSame(binaryTree_Node3, binaryTree_Node0);
      assertNotSame(binaryTree_Node3, binaryTree_Node2);
      assertNotSame(binaryTree_Node3, binaryTree_Node1);
      assertNull(binaryTree_Node4);
      
      boolean boolean1 = BinaryTree.isCommon(binaryTree_Node2, binaryTree_Node2.right);
      assertFalse(boolean1 == boolean0);
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node3));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-1253), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node2, binaryTree_Node3);
      assertNotSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertFalse(boolean1);
      
      int int3 = BinaryTree.getLeafs(binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node2));
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node2);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node3);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryTree.inOrder2((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      assertEquals(0, binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      BinaryTree.Node binaryTree_Node1 = binaryTree_Node0.left;
      assertNull(binaryTree_Node1);
      
      BinaryTree.preOrder2((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-296));
      assertEquals((-296), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      int int0 = BinaryTree.getNodes(binaryTree_Node0);
      assertEquals((-296), binaryTree_Node0.data);
      assertEquals(1, int0);
      
      BinaryTree.postOrder1(binaryTree_Node0);
      assertEquals((-296), binaryTree_Node0.data);
      
      binaryTree_Node0.left = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-2163));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertEquals((-2163), binaryTree_Node1.data);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node0.right = binaryTree_Node1;
      int int1 = BinaryTree.calcKNodes(binaryTree_Node0, 59);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(int1 == int0);
      assertEquals((-296), binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertEquals(2, int1);
      
      BinaryTree.Node binaryTree_Node2 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertFalse(binaryTree_Node2.equals((Object)binaryTree_Node1));
      assertEquals((-296), binaryTree_Node0.data);
      assertEquals((-296), binaryTree_Node2.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertSame(binaryTree_Node2, binaryTree_Node0);
      assertNotSame(binaryTree_Node2, binaryTree_Node1);
      assertNotNull(binaryTree_Node2);
      
      BinaryTree.preOrder2(binaryTree_Node1);
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node0));
      assertFalse(binaryTree_Node1.equals((Object)binaryTree_Node2));
      assertEquals((-2163), binaryTree_Node1.data);
      assertNotSame(binaryTree_Node1, binaryTree_Node0);
      assertNotSame(binaryTree_Node1, binaryTree_Node2);
      
      boolean boolean0 = BinaryTree.isCommon(binaryTree_Node0.right, binaryTree_Node0.right);
      assertFalse(binaryTree_Node0.equals((Object)binaryTree_Node1));
      assertEquals((-296), binaryTree_Node0.data);
      assertNotSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node0, binaryTree_Node2);
      assertTrue(boolean0);
      
      // Undeclared exception!
      BinaryTree.postOrder2(binaryTree_Node0.left);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      assertEquals((-1), binaryTree_Node0.data);
      assertNotNull(binaryTree_Node0);
      
      binaryTree_Node0.data = 327;
      BinaryTree.Node binaryTree_Node1 = BinaryTree.findLCA(binaryTree_Node0, binaryTree_Node0, binaryTree_Node0);
      assertEquals(327, binaryTree_Node0.data);
      assertEquals(327, binaryTree_Node1.data);
      assertSame(binaryTree_Node0, binaryTree_Node1);
      assertSame(binaryTree_Node1, binaryTree_Node0);
      assertNotNull(binaryTree_Node1);
      
      binaryTree_Node1.right = binaryTree_Node0;
      binaryTree_Node0.left = binaryTree_Node1;
      // Undeclared exception!
      BinaryTree.preOrder2(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1);
      BinaryTree.postOrder2(binaryTree_Node0);
      BinaryTree.levelOrder(binaryTree_Node0);
      BinaryTree.mirror(binaryTree_Node0);
      BinaryTree.preOrder1(binaryTree_Node0);
      BinaryTree.getLeafs(binaryTree_Node0);
      BinaryTree.getHeight(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      BinaryTree.levelOrder(binaryTree_Node1);
      BinaryTree.isCommon(binaryTree_Node0, binaryTree_Node0);
      BinaryTree binaryTree0 = new BinaryTree();
      BinaryTree.mirror(binaryTree_Node0);
      BinaryTree.inOrder2(binaryTree_Node1);
      BinaryTree.levelOrder(binaryTree_Node1);
      binaryTree_Node1.left = binaryTree_Node0;
      BinaryTree.inOrder2(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-1236));
      BinaryTree.calcKNodes(binaryTree_Node2, (-47));
      binaryTree_Node2.right = binaryTree_Node1;
      BinaryTree.getHeight(binaryTree_Node2);
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node(1);
      binaryTree_Node1.left.right = binaryTree_Node1;
      BinaryTree.findLCA(binaryTree_Node2, binaryTree_Node3, binaryTree_Node0);
      BinaryTree.isCommon(binaryTree_Node2, binaryTree_Node2.right);
      BinaryTree.Node binaryTree_Node4 = new BinaryTree.Node(1);
      BinaryTree.Node binaryTree_Node5 = new BinaryTree.Node((-1151));
      binaryTree_Node4.left = binaryTree_Node5;
      BinaryTree.getLeafs(binaryTree_Node4);
      BinaryTree.Node binaryTree_Node6 = binaryTree_Node2.right;
      BinaryTree.isCommon(binaryTree_Node6, binaryTree_Node0);
      BinaryTree.Node binaryTree_Node7 = new BinaryTree.Node(0);
      // Undeclared exception!
      BinaryTree.levelOrder(binaryTree_Node6);
  }
}
